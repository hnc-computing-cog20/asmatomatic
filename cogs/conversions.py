###############################################################################
# cogs/conversions.py
#
# Author: John C <https://lvl-6.github.io>
# Created: 27/10/2020
#
# Description:
# Generate questions and give help for converting between numbering systems
# (binary, hexadecimal, decimal).
#
###############################################################################

import asyncio
from random import randint
import discord
from discord.ext import commands


###############################################################################
# Commands
###############################################################################

class Conversions(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """
        Greet members as they join
        """
        
        if channel is not None:
            await channel.send(
                    'My programmer should have deleted this greeting function,'
                    '{0.mention}?'.format(member)
                    )

    @commands.command()
    async def hello(self, ctx, *, member: discord.Member = None):
        """
        Says hello to a specific user
        """
        
        member = member or ctx.author
        await ctx.send(
                'Hello {0.name}. Get your webcam on.'.format(member)
                )

    @commands.command()
    async def addtwo(self, ctx):
        """
        TEST Adds two numbers
        """
        
        await ctx.send(
            'Result (should be 7): ' + await asyncio.get_event_loop().run_in_executor(None, add_two, 3, 4)
            )

    @commands.command()
    async def random_number(self, ctx):
        """
        Displays a random number to the user
        """
        
        await ctx.send(
            'Your random binary number is: `'
            + await asyncio.get_event_loop().run_in_executor(None, generate_random_number)
            + '`'
            )


###############################################################################
# Functions
###############################################################################

def add_two(x: int, y: int):
    """
    TEST Adds two numbers
    """
    return str(x + y)
    
def generate_random_number(
                            base: str = 'binary',
                            length: int = 8,
                            divider: int = 1,
                           ):
    """
    Generates a random number (either binary, decimal, or hexadecimal)
    
    Args:
    base (str) - the numbering system to use. Default is 'binary'.
    length (int) - the length (in bits) of the desired number. Default is 8.
    divider (int) - divide length by this to split binary numbers.
                    Division should not have a remainder. Default is 1.
    """
    
    max_value = 2**length - 1 # Maximum value of the random int (in decimal)
    
    if base == 'binary':
        total = ''
        for bit in range(int(length / divider)):
            total = total + str(randint(0, 1))
        return total

    elif base == 'decimal':
        pass

    elif base == 'hexadecimal':
        pass

    else:
        print('Invalid base given, returning 0...')
        return 0

def format_random_number(
                     number: int = 0,
                     divider: int = 8,
                    ):
    """
    Format numbers generated by generate_random_number,
    for outputting to user.
    
    Args:
    number(int) - the number to split. Default is 0.
    divider(int) - (bin, hex) how many bits to display before splitting.
                   Default is 8.
    """
    
    pass
    
    


###############################################################################
# Setup
###############################################################################

def setup(bot):
    bot.add_cog(Conversions(bot))